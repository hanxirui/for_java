<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE  mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.chinal.emp.dao.EmployeeDao">
    <resultMap id="queryResultMap" type="com.chinal.emp.entity.Employee">
                <result column="id" property="id" jdbcType="INTEGER" />
                <result column="name" property="name" jdbcType="VARCHAR" />
                <result column="role" property="role" jdbcType="INTEGER" />
                <result column="password" property="password" jdbcType="VARCHAR" />
                <result column="account" property="account" jdbcType="VARCHAR" />
                <result column="code" property="code" jdbcType="VARCHAR" />
                <result column="pid" property="pid" jdbcType="VARCHAR" />
                <result column="orgname" property="orgname" jdbcType="VARCHAR" />
                <result column="orgcode" property="orgcode" jdbcType="VARCHAR" />
                <result column="sex" property="sex" jdbcType="VARCHAR" />
                <result column="phone" property="phone" jdbcType="VARCHAR" />
                <result column="jointime" property="jointime" jdbcType="TIMESTAMP" />
            </resultMap>

    <select id="find" parameterType="org.durcframework.core.expression.ExpressionQuery"
		resultMap="queryResultMap">
		SELECT 
                         id
                , name
                , role
                , password
                , account
                , code
                , pid
                , orgname
                , orgcode
                , sex
                , phone
                , jointime
        		FROM employee t
		<include refid="expressionBlock.where" />
		<choose>
			<when test="sortname == null">
				ORDER BY t.id desc
			</when>
			<otherwise>
				ORDER BY ${order}
			</otherwise>
		</choose>
		<if test="!isQueryAll">
			LIMIT
			#{start,jdbcType=INTEGER},#{limit,jdbcType=INTEGER}
		</if>
	</select>


    <select id="findTotalCount" parameterType="org.durcframework.core.expression.ExpressionQuery"
		resultType="java.lang.Integer">
		SELECT count(*) FROM employee t
		<include refid="expressionBlock.where" />
    </select>

    <insert id="save" parameterType="com.chinal.emp.entity.Employee"
    keyProperty="id" keyColumn="id" useGeneratedKeys="true"
    >
	INSERT INTO employee
         (
                                                  `name`
                                        , `role`
                                        , `password`
                                        , `account`
                                        , `code`
                                        , `pid`
                                        , `orgname`
                                        , `orgcode`
                                        , `sex`
                                        , `phone`
                                        , `jointime`
                              )
	VALUES (
                                                  #{name,jdbcType=VARCHAR}
                                        , #{role,jdbcType=INTEGER}
                                        , #{password,jdbcType=VARCHAR}
                                        , #{account,jdbcType=VARCHAR}
                                        , #{code,jdbcType=VARCHAR}
                                        , #{pid,jdbcType=VARCHAR}
                                        , #{orgname,jdbcType=VARCHAR}
                                        , #{orgcode,jdbcType=VARCHAR}
                                        , #{sex,jdbcType=VARCHAR}
                                        , #{phone,jdbcType=VARCHAR}
                                        , #{jointime,jdbcType=TIMESTAMP}
                     
        )
	</insert>


    <update id="update" parameterType="com.chinal.emp.entity.Employee">
    UPDATE employee
    SET 
                                                 name=#{name,jdbcType=VARCHAR}
                                     , role=#{role,jdbcType=INTEGER}
                                     , password=#{password,jdbcType=VARCHAR}
                                     , account=#{account,jdbcType=VARCHAR}
                                     , code=#{code,jdbcType=VARCHAR}
                                     , pid=#{pid,jdbcType=VARCHAR}
                                     , orgname=#{orgname,jdbcType=VARCHAR}
                                     , orgcode=#{orgcode,jdbcType=VARCHAR}
                                     , sex=#{sex,jdbcType=VARCHAR}
                                     , phone=#{phone,jdbcType=VARCHAR}
                                     , jointime=#{jointime,jdbcType=TIMESTAMP}
                     WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <select id="get" resultMap="queryResultMap" parameterType="com.chinal.emp.entity.Employee">
		SELECT 
                         id
                , name
                , role
                , password
                , account
                , code
                , pid
                , orgname
                , orgcode
                , sex
                , phone
                , jointime
        		FROM employee t
		WHERE id = #{id,jdbcType=INTEGER}
	</select>
	
	<delete id="del" parameterType="com.chinal.emp.entity.Employee">
		DELETE FROM employee
		WHERE id = #{id,jdbcType=INTEGER}
	</delete>

</mapper>