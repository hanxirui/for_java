package com.hxr.javatone.IncreaseLockSample;/** * Created with IntelliJ IDEA. Project: test-jar Author: Kevin Date: * 16/5/22 Time: 上午10:55 */public class MultiThreadApp {	public static class IncreaseThread extends Thread {		private IncreaseObject increaseObject;		public IncreaseThread(IncreaseObject t) {			this.increaseObject = t;		}		public void run() {			long timeStart = System.currentTimeMillis();			for (long i = 0; i < 500000000L; i++) {				increaseObject.setSimpleLong(increaseObject.getSimpleLong() + 1);			}			long endStart = System.currentTimeMillis();			System.out.println("Multi Simple thread time consuming" + String.valueOf(endStart - timeStart) + " final number"					+ increaseObject.getSimpleLong());		}	}	public static class SyncIncreaseThread extends Thread {		private SyncIncreaseObject syncIncreaseObject;		private Long times;		public SyncIncreaseThread(SyncIncreaseObject syncIncreaseObject, Long times) {			this.syncIncreaseObject = syncIncreaseObject;			this.times = times;		}		public void run() {			long timeStart = System.currentTimeMillis();			for (long i = 0; i < times; i++) {				syncIncreaseObject.increase();//				syncIncreaseObject.setSyncLong(syncIncreaseObject.getSyncLong() + 1);			}			long endStart = System.currentTimeMillis();			System.out.println("Multi Sync thread time consuming" + String.valueOf(endStart - timeStart) + " final number"					+ syncIncreaseObject.getSyncLong());		}	}	public static class AtomicIncreaseThread extends Thread {		private AtomicIncreaseObject atomicIncreaseObject;		public AtomicIncreaseThread(AtomicIncreaseObject atomicIncreaseObjectt) {			this.atomicIncreaseObject = atomicIncreaseObjectt;		}		public void run() {			long timeStart = System.currentTimeMillis();			for (long i = 0; i < 500000000L; i++) {				atomicIncreaseObject.getAtomicLong().incrementAndGet();			}			long endStart = System.currentTimeMillis();			System.out.println("Multi Atomic thread time consuming" + String.valueOf(endStart - timeStart) + " final number"					+ atomicIncreaseObject.getAtomicLong());		}	}	public static void main(String[] args) {		simpleMultiTest();		syncMultiTest();		atomicTest();	}	private static void atomicTest() {		AtomicIncreaseObject atomicIncreaseObject = new AtomicIncreaseObject();		AtomicIncreaseThread atomicIncreaseThread1 = new AtomicIncreaseThread(atomicIncreaseObject);		AtomicIncreaseThread atomicIncreaseThread2 = new AtomicIncreaseThread(atomicIncreaseObject);		atomicIncreaseThread1.start();		atomicIncreaseThread2.start();	}	private static void syncMultiTest() {		SyncIncreaseObject syncIncreaseObject = new SyncIncreaseObject();		SyncIncreaseThread increaseThread1 = new SyncIncreaseThread(syncIncreaseObject,500000000L);		SyncIncreaseThread increaseThread2 = new SyncIncreaseThread(syncIncreaseObject,500000000L);		increaseThread1.start();		increaseThread2.start();	}	private static void simpleMultiTest() {		IncreaseObject increaseObject = new IncreaseObject();		IncreaseThread increaseThread1 = new IncreaseThread(increaseObject);		IncreaseThread increaseThread2 = new IncreaseThread(increaseObject);		increaseThread1.start();		increaseThread2.start();	}}