package com.hxr.javatone.concurrent;import java.util.Random;import java.util.concurrent.BrokenBarrierException;import java.util.concurrent.CyclicBarrier;/** * Created with IntelliJ IDEA. * Project: test-jar * 三个线程A B C各自准备，等准备好，一起运行 * Author: Kevin * Date: 2017/10/11 * Time: 下午9:00 */public class CyclicBarrierTest {	public static void main(String[] args) {		runABCWhenAllReady();	}	private static void runABCWhenAllReady(){		int runner = 3;		final CyclicBarrier cyclicBarrier = new CyclicBarrier(runner);		final Random random = new Random();		for(char runnerName = 'A'; runnerName <='C'; runnerName ++){			final String rN = String.valueOf(runnerName);			new Thread(new Runnable() {				@Override				public void run() {					long prepareTime = random.nextInt(10000) + 100;					System.out.println(rN + "is preparing for time:" + prepareTime);					try {						Thread.sleep(prepareTime);					} catch (Exception e) {						e.printStackTrace();					}					try {						System.out.println(rN + "is prepared, waiting for others");						cyclicBarrier.await(); // 当前线程准备完毕，等待别人准备好					} catch (InterruptedException e) {						e.printStackTrace();					} catch (BrokenBarrierException e) {						e.printStackTrace();					}					System.out.println(rN + "starts running at " + System.currentTimeMillis()); // 所有线程都准备好了，一起开始跑				}			}).start();		}	}}